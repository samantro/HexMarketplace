[{"C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\api\\hello.js":"1","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\config.js":"2","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\create-and-list-nft.js":"3","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\index.js":"4","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\my-listed-nfts.js":"5","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\my-nfts.js":"6","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\resell-nft.js":"7","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\_app.js":"8"},{"size":175,"mtime":1668587271408,"results":"9","hashOfConfig":"10"},{"size":214,"mtime":1668587271408,"results":"11","hashOfConfig":"10"},{"size":6932,"mtime":1668592288673,"results":"12","hashOfConfig":"10"},{"size":5829,"mtime":1669007265687,"results":"13","hashOfConfig":"10"},{"size":3127,"mtime":1668593112565,"results":"14","hashOfConfig":"10"},{"size":5495,"mtime":1669007793392,"results":"15","hashOfConfig":"10"},{"size":2314,"mtime":1668587271416,"results":"16","hashOfConfig":"10"},{"size":977,"mtime":1668587271408,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"872exm",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\api\\hello.js",[],[],"C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\config.js",[],[],"C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\create-and-list-nft.js",["45","46"],[],"import { useState } from 'react'\r\nimport Web3 from 'web3'\r\nimport Web3Modal from 'web3modal'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport { useRouter } from 'next/router'\r\n\r\n//const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\nconst client = ipfsHttpClient('https://hexnft.infura-ipfs.io:5001/api/v0')\r\n\r\nimport Marketplace from '../contracts/ethereum-contracts/Marketplace.json'\r\nimport BoredPetsNFT from '../contracts/ethereum-contracts/BoredPetsNFT.json'\r\n\r\n// new stuff\r\nimport axios from 'axios';\r\nimport { contractAddress,PINATA_KEY,PINATA_SECRET } from './config';\r\n\r\n\r\nexport default function CreateItem() {\r\n  const [fileUrl, setFileUrl] = useState(null)\r\n  const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' })\r\n  const router = useRouter()\r\n\r\n  async function onChange(e) {\r\n    // upload image to IPFS\r\n    const file = e.target.files[0]\r\n/*    try {\r\n      const added = await client.add(\r\n        file,\r\n        {\r\n          progress: (prog) => console.log(`received: ${prog}`)\r\n        }\r\n      )\r\n      //alert(\" added path from onChange(): \" + ${added.path})\r\n      const url = `https://hexnft.infura-ipfs.io/ipfs/${added.path}`\r\n      //const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n      alert(\"url from onChange(): \" + url)\r\n      setFileUrl(url)\r\n    } \r\n*/\r\n     try{\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"file\",file);\r\n            const resFile = await axios({\r\n                method: \"post\",\r\n                url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n                data: formData,\r\n                headers:{\r\n                    'pinata_api_key':PINATA_KEY,\r\n                    'pinata_secret_api_key':PINATA_SECRET,\r\n                    'Content-Type':'multipart/form-data'\r\n                },\r\n            });\r\n            const url = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n            alert(\"url onChange \"+ url);\r\n            //const ImageURL = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n            setFileUrl(url);\r\n    } //end of try\r\n\r\n    catch (error) {\r\n      console.log('Error uploading file: ', error)\r\n      alert (\"!!!!! Error in on change - \" + error)\r\n    }  \r\n  }\r\n\r\n   async function uploadToIPFS() {\r\n    const { name, description, price } = formInput\r\n    if (!name || !description || !price ) {\r\n      return\r\n    } else {\r\n      // first, upload metadata to IPFS\r\n      const data = JSON.stringify({\r\n        name, description, image: fileUrl\r\n      })\r\n      // alert(\"uploadToIPFS:beofre TRY name,description,price  = \" + name + \" \" + description + \" \" + price  + \" \" + fileUrl);\r\n      // alert(\"uploadToIPFS:beofre TRY data = \" + data);\r\n      //try {\r\n        //alert('faking ipfx')\r\n        /*const added = await client.add(data)\r\n        const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n        */\r\n        //const url = `https://ipfs.infura.io/ipfs/}`        \r\n        // after metadata is uploaded to IPFS, return the URL to use it in the transaction\r\n        //return url\r\n      //} \r\n         try{\r\n\r\n            // const formData = new FormData();\r\n            // formData.append(\"file\",file);\r\n            // const resFile = await axios({\r\n            //     method: \"post\",\r\n            //     url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n            //     data: formData,\r\n            //     headers:{\r\n            //         'pinata_api_key':PINATA_KEY,\r\n            //         'pinata_secret_api_key':PINATA_SECRET,\r\n            //         'Content-Type':'multipart/form-data'\r\n            //     },\r\n            // });\r\n            // const url = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n            // const ImageURL = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n            // setFileUrl(url);\r\n            // alert(\"uploadToIPFS:end of TRY name,description,price  = \" + name + \" \" + description + \" \" + price  + \" \" + fileUrl);\r\n            // alert(\"uploadToIPFS:end of TRY data = \" + data);\r\n            // alert(\"URL from uploadToIPFS -\" + fileUrl)\r\n            return fileUrl;\r\n        } //end of try\r\n        catch (error) {\r\n        console.log('Error uploading file: ', error)\r\n        alert(\"Failure in uploadToIPFS -\" + error)\r\n      } \r\n    }\r\n  }\r\n\r\n  async function listNFTForSale() {\r\n    const web3Modal = new Web3Modal()\r\n    const provider = await web3Modal.connect()\r\n    const web3 = new Web3(provider)\r\n    const url = await uploadToIPFS()\r\n    const networkId = await web3.eth.net.getId()\r\n\r\n    // Mint the NFT\r\n    const boredPetsContractAddress = BoredPetsNFT.networks[networkId].address\r\n    const boredPetsContract = new web3.eth.Contract(BoredPetsNFT.abi, boredPetsContractAddress)\r\n    const accounts = await web3.eth.getAccounts()\r\n    const marketPlaceContract = new web3.eth.Contract(Marketplace.abi, Marketplace.networks[networkId].address)\r\n    let listingFee = await marketPlaceContract.methods.getListingFee().call()\r\n    listingFee = listingFee.toString()\r\n    // alert(\"url line 69 - \" + url)\r\n    // alert(\"account used for listing \" + accounts[0])\r\n    boredPetsContract.methods.mint(url).send({ from: accounts[0] }).on('receipt', function (receipt) {\r\n        console.log('minted');\r\n        // List the NFT\r\n        const tokenId = receipt.events.NFTMinted.returnValues[0];\r\n        marketPlaceContract.methods.listNft(boredPetsContractAddress, tokenId, Web3.utils.toWei(formInput.price, \"ether\"))\r\n            .send({ from: accounts[0], value: listingFee }).on('receipt', function () {\r\n                console.log('listed')\r\n                router.push('/')\r\n            });\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <div className=\"w-1/2 flex flex-col pb-12\">\r\n        <input \r\n          placeholder=\"Asset Name\"\r\n          className=\"mt-8 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\r\n        />\r\n        <textarea\r\n          placeholder=\"Asset Description\"\r\n          className=\"mt-2 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\r\n        />\r\n        <input\r\n          placeholder=\"Asset Price in Eth\"\r\n          className=\"mt-2 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          name=\"Asset\"\r\n          className=\"my-4\"\r\n          onChange={onChange}\r\n        />\r\n        {\r\n          fileUrl && (\r\n            <img className=\"rounded mt-4\" width=\"350\" src={fileUrl} />\r\n          )\r\n        }\r\n        <button onClick={listNFTForSale} className=\"font-bold mt-4 bg-teal-400 text-white rounded p-4 shadow-lg\">\r\n          Mint and list NFT\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\index.js",["47","48"],[],"C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\my-listed-nfts.js",["49","50"],[],"import Web3 from 'web3';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Web3Modal from 'web3modal';\r\n\r\nimport Marketplace from '../../contracts/optimism-contracts/Marketplace.json';\r\nimport BoredPetsNFT from '../../contracts/optimism-contracts/BoredPetsNFT.json';\r\n\r\nexport default function CreatorDashboard() {\r\n  const [nfts, setNfts] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n\r\n  useEffect(() => { loadNFTs() }, [])\r\n\r\n  async function loadNFTs() {\r\n    const web3Modal = new Web3Modal()\r\n    const provider = await web3Modal.connect()\r\n    const web3 = new Web3(provider)\r\n    const networkId = await web3.eth.net.getId()\r\n\r\n    // Get listed NFTs\r\n    const marketPlaceContract = new web3.eth.Contract(Marketplace.abi, Marketplace.networks[networkId].address)\r\n    const accounts = await web3.eth.getAccounts()\r\n    console.log(\"metamask accounts \"+accounts[1]);\r\n    const listings = await marketPlaceContract.methods.getMyListedNfts().call({from: accounts[0]})\r\n    console.log(\"selected account \"+accounts[0]);\r\n    console.log(\"my listed nfts = \" + listings );\r\n    // Iterate over my listed NFTs and retrieve their metadata\r\n    const nfts = await Promise.all(listings.map(async i => {\r\n      //alert(\"iterator = \" + i);\r\n      try {\r\n        //alert(\"loadNfts inside try : price,tokenId,seller....= \" + i.price + \" \" + i.tokenId + \" \" + i.seller);\r\n        const boredPetsContract = new web3.eth.Contract(BoredPetsNFT.abi, BoredPetsNFT.networks[networkId].address)\r\n        const tokenURI = await boredPetsContract.methods.tokenURI(i.tokenId).call();\r\n        //alert(\"tokenUri inside the try\"+tokenURI);\r\n        //const meta = await axios.get(tokenURI);\r\n        //alert(\"meta.data \" + meta.data);\r\n        //alert(\"Nfts inside try: image url....= \" + meta.data.image);\r\n        let item = {\r\n          price: i.price,\r\n          tokenId: i.tokenId,\r\n          seller: i.seller,\r\n          owner: i.owner,\r\n          //image: meta.data.image,\r\n          image: tokenURI,\r\n        }\r\n        return item\r\n      } catch(err) {\r\n        console.log(err)\r\n        return null\r\n      }\r\n    }))\r\n    setNfts(nfts.filter(nft => nft !== null))\r\n    setLoadingState('loaded')\r\n  }\r\n\r\n  if (loadingState === 'loaded' && nfts.length===0) {\r\n    return (<h1 className=\"py-10 px-20 text-3xl\">No NFTs listed</h1>)\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div className=\"p-4\">\r\n          <h2 className=\"text-2xl py-2\">Items Listed</h2>\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\r\n            {\r\n              nfts.map((nft, i) => (\r\n                <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\r\n                  <img src={nft.image} className=\"rounded\" />\r\n                  <div className=\"p-4 bg-black\">\r\n                    <p className=\"text-2xl font-bold text-white\">Price - {Web3.utils.fromWei(nft.price, \"ether\")} Eth</p>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\my-nfts.js",["51","52"],[],"C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\resell-nft.js",["53","54","55"],[],"import { useEffect, useState } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useRouter } from 'next/router'\r\nimport axios from 'axios'\r\nimport Web3Modal from 'web3modal'\r\n\r\nimport Marketplace from '../../contracts/optimism-contracts/Marketplace.json'\r\nimport BoredPetsNFT from '../../contracts/optimism-contracts/BoredPetsNFT.json'\r\n\r\nexport default function ResellNFT() {\r\n  const [formInput, updateFormInput] = useState({ price: '', image: '' })\r\n  const router = useRouter()\r\n  const { id, tokenURI } = router.query\r\n  const { image, price } = formInput\r\n\r\n  useEffect(() => { fetchNFT() }, [id])\r\n\r\n  async function fetchNFT() {\r\n    if (!tokenURI) {\r\n        return\r\n    } else {\r\n        const meta = await axios.get(tokenURI)\r\n        updateFormInput(state => ({ ...state, image: meta.data.image }))\r\n    }\r\n  }\r\n\r\n  async function listNFTForSale() {\r\n    if (!price) {\r\n        return\r\n    } else {\r\n        const web3Modal = new Web3Modal()\r\n        const provider = await web3Modal.connect()\r\n        const web3 = new Web3(provider)\r\n        const networkId = await web3.eth.net.getId()\r\n        const marketPlaceContract = new web3.eth.Contract(Marketplace.abi, Marketplace.networks[networkId].address)\r\n        let listingFee = await marketPlaceContract.methods.getListingFee().call()\r\n        listingFee = listingFee.toString()\r\n        const accounts = await web3.eth.getAccounts()\r\n        marketPlaceContract.methods.resellNft(BoredPetsNFT.networks[networkId].address, id, Web3.utils.toWei(formInput.price, \"ether\"))\r\n            .send({ from: accounts[0], value: listingFee }).on('receipt', function () {\r\n                router.push('/')\r\n            });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <div className=\"w-1/2 flex flex-col pb-12\">\r\n        <input\r\n          placeholder=\"Asset Price in Eth\"\r\n          className=\"mt-2 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n        />\r\n        {\r\n          image && (\r\n            <img className=\"rounded mt-4\" width=\"350\" src={image} />\r\n          )\r\n        }\r\n        <button onClick={listNFTForSale} className=\"font-bold mt-4 bg-teal-400 text-white rounded p-4 shadow-lg\">\r\n          List NFT\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Vishalv\\Desktop\\projects\\HexMarketplace\\client\\pages\\_app.js",[],[],{"ruleId":"56","severity":1,"message":"57","line":169,"column":13,"nodeType":"58","endLine":169,"endColumn":71},{"ruleId":"59","severity":1,"message":"60","line":169,"column":13,"nodeType":"58","endLine":169,"endColumn":71},{"ruleId":"56","severity":1,"message":"57","line":77,"column":21,"nodeType":"58","endLine":77,"endColumn":62},{"ruleId":"59","severity":1,"message":"60","line":77,"column":21,"nodeType":"58","endLine":77,"endColumn":62},{"ruleId":"56","severity":1,"message":"57","line":68,"column":19,"nodeType":"58","endLine":68,"endColumn":62},{"ruleId":"59","severity":1,"message":"60","line":68,"column":19,"nodeType":"58","endLine":68,"endColumn":62},{"ruleId":"56","severity":1,"message":"57","line":71,"column":21,"nodeType":"58","endLine":71,"endColumn":59},{"ruleId":"59","severity":1,"message":"60","line":71,"column":21,"nodeType":"58","endLine":71,"endColumn":59},{"ruleId":"61","severity":1,"message":"62","line":16,"column":35,"nodeType":"63","endLine":16,"endColumn":39,"suggestions":"64"},{"ruleId":"56","severity":1,"message":"57","line":56,"column":13,"nodeType":"58","endLine":56,"endColumn":69},{"ruleId":"59","severity":1,"message":"60","line":56,"column":13,"nodeType":"58","endLine":56,"endColumn":69},"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchNFT'. Either include it or remove the dependency array.","ArrayExpression",["65"],{"desc":"66","fix":"67"},"Update the dependencies array to be: [fetchNFT, id]",{"range":"68","text":"69"},[596,600],"[fetchNFT, id]"]